/* tslint:disable */
/* eslint-disable */
/**
 * SNGF API
 * API for managing plants, seeds, events, blogs, testimonials, and orders for the SNGF website
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Seed,
} from '../models/index';
import {
    SeedFromJSON,
    SeedToJSON,
} from '../models/index';

export interface CreateSeedRequest {
    seed: Seed;
}

export interface GetListSeedRequest {
    name?: string;
    category?: GetListSeedCategoryEnum;
    status?: GetListSeedStatusEnum;
    page?: number;
    pageSize?: number;
}

export interface GetSeedByIDRequest {
    id: string;
}

export interface UpdateSeedRequest {
    id: string;
    seed: Seed;
}

/**
 * 
 */
export class SeedsApi extends runtime.BaseAPI {

    /**
     * Add a new seed to the inventory.
     * Add a new seed
     */
    async createSeedRaw(requestParameters: CreateSeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['seed'] == null) {
            throw new runtime.RequiredError(
                'seed',
                'Required parameter "seed" was null or undefined when calling createSeed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/seeds/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeedToJSON(requestParameters['seed']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a new seed to the inventory.
     * Add a new seed
     */
    async createSeed(requestParameters: CreateSeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createSeedRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a filtered list of active seeds.
     * Get list of seeds
     */
    async getListSeedRaw(requestParameters: GetListSeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Seed>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/seeds/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SeedFromJSON));
    }

    /**
     * Retrieve a filtered list of active seeds.
     * Get list of seeds
     */
    async getListSeed(requestParameters: GetListSeedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Seed>> {
        const response = await this.getListSeedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a single seed by its ID.
     * Get seed by ID
     */
    async getSeedByIDRaw(requestParameters: GetSeedByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Seed>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSeedByID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/seeds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeedFromJSON(jsonValue));
    }

    /**
     * Retrieve a single seed by its ID.
     * Get seed by ID
     */
    async getSeedByID(requestParameters: GetSeedByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Seed> {
        const response = await this.getSeedByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing seed\'s information.
     * Update a seed
     */
    async updateSeedRaw(requestParameters: UpdateSeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSeed().'
            );
        }

        if (requestParameters['seed'] == null) {
            throw new runtime.RequiredError(
                'seed',
                'Required parameter "seed" was null or undefined when calling updateSeed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/seeds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SeedToJSON(requestParameters['seed']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing seed\'s information.
     * Update a seed
     */
    async updateSeed(requestParameters: UpdateSeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSeedRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetListSeedCategoryEnum = {
    Agroforestieres: 'AGROFORESTIERES',
    EndemiquesAutochtones: 'ENDEMIQUES_AUTOCHTONES',
    ExotiquesReboisement: 'EXOTIQUES_REBOISEMENT',
    Ornementales: 'ORNEMENTALES',
    Embroussaillements: 'EMBROUSSAILLEMENTS'
} as const;
export type GetListSeedCategoryEnum = typeof GetListSeedCategoryEnum[keyof typeof GetListSeedCategoryEnum];
/**
 * @export
 */
export const GetListSeedStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;
export type GetListSeedStatusEnum = typeof GetListSeedStatusEnum[keyof typeof GetListSeedStatusEnum];
