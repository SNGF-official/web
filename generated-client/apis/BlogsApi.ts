/* tslint:disable */
/* eslint-disable */
/**
 * SNGF API
 * API for managing plants, seeds, events, blogs, testimonials, and orders for the SNGF website
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Blog,
} from '../models/index';
import {
    BlogFromJSON,
    BlogToJSON,
} from '../models/index';

export interface CrupdateBlogRequest {
    id: number;
    blog: Blog;
}

export interface GetBlogByIDRequest {
    id: number;
}

export interface GetListBlogRequest {
    keyword?: string;
    status?: GetListBlogStatusEnum;
    operatorId?: number;
}

/**
 * 
 */
export class BlogsApi extends runtime.BaseAPI {

    /**
     * Update an existing blog article.
     * Update a blog
     */
    async crupdateBlogRaw(requestParameters: CrupdateBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling crupdateBlog().'
            );
        }

        if (requestParameters['blog'] == null) {
            throw new runtime.RequiredError(
                'blog',
                'Required parameter "blog" was null or undefined when calling crupdateBlog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/blogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlogToJSON(requestParameters['blog']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing blog article.
     * Update a blog
     */
    async crupdateBlog(requestParameters: CrupdateBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.crupdateBlogRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a single blog article by its ID.
     * Get blog by ID
     */
    async getBlogByIDRaw(requestParameters: GetBlogByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBlogByID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogFromJSON(jsonValue));
    }

    /**
     * Retrieve a single blog article by its ID.
     * Get blog by ID
     */
    async getBlogByID(requestParameters: GetBlogByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blog> {
        const response = await this.getBlogByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a filtered list of blog articles.
     * Get list of blogs
     */
    async getListBlogRaw(requestParameters: GetListBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Blog>>> {
        const queryParameters: any = {};

        if (requestParameters['keyword'] != null) {
            queryParameters['keyword'] = requestParameters['keyword'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['operatorId'] != null) {
            queryParameters['operator_id'] = requestParameters['operatorId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blogs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlogFromJSON));
    }

    /**
     * Retrieve a filtered list of blog articles.
     * Get list of blogs
     */
    async getListBlog(requestParameters: GetListBlogRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Blog>> {
        const response = await this.getListBlogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetListBlogStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;
export type GetListBlogStatusEnum = typeof GetListBlogStatusEnum[keyof typeof GetListBlogStatusEnum];
