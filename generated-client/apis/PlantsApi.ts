/* tslint:disable */
/* eslint-disable */
/**
 * SNGF API
 * API for managing plants, seeds, events, blogs, testimonials, and orders for the SNGF website
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Plant,
} from '../models/index';
import {
    PlantFromJSON,
    PlantToJSON,
} from '../models/index';

export interface CreatePlantRequest {
    plant: Plant;
}

export interface GetListPlantRequest {
    name?: string;
    category?: string;
    size?: GetListPlantSizeEnum;
    status?: GetListPlantStatusEnum;
    page?: number;
    pageSize?: number;
}

export interface GetPlantByIDRequest {
    id: number;
}

export interface UpdatePlantRequest {
    id: number;
    plant: Plant;
}

/**
 * 
 */
export class PlantsApi extends runtime.BaseAPI {

    /**
     * Add a new plant to the inventory.
     * Add a new plant
     */
    async createPlantRaw(requestParameters: CreatePlantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['plant'] == null) {
            throw new runtime.RequiredError(
                'plant',
                'Required parameter "plant" was null or undefined when calling createPlant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/plants/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlantToJSON(requestParameters['plant']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a new plant to the inventory.
     * Add a new plant
     */
    async createPlant(requestParameters: CreatePlantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createPlantRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a filtered list of active plants.
     * Get list of plants
     */
    async getListPlantRaw(requestParameters: GetListPlantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Plant>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plants/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlantFromJSON));
    }

    /**
     * Retrieve a filtered list of active plants.
     * Get list of plants
     */
    async getListPlant(requestParameters: GetListPlantRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Plant>> {
        const response = await this.getListPlantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a single plant by its ID.
     * Get plant by ID
     */
    async getPlantByIDRaw(requestParameters: GetPlantByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Plant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPlantByID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlantFromJSON(jsonValue));
    }

    /**
     * Retrieve a single plant by its ID.
     * Get plant by ID
     */
    async getPlantByID(requestParameters: GetPlantByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Plant> {
        const response = await this.getPlantByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing plant\'s information.
     * Update a plant
     */
    async updatePlantRaw(requestParameters: UpdatePlantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePlant().'
            );
        }

        if (requestParameters['plant'] == null) {
            throw new runtime.RequiredError(
                'plant',
                'Required parameter "plant" was null or undefined when calling updatePlant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/plants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlantToJSON(requestParameters['plant']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing plant\'s information.
     * Update a plant
     */
    async updatePlant(requestParameters: UpdatePlantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePlantRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetListPlantSizeEnum = {
    Pm: 'PM',
    Mm: 'MM',
    Gm: 'GM'
} as const;
export type GetListPlantSizeEnum = typeof GetListPlantSizeEnum[keyof typeof GetListPlantSizeEnum];
/**
 * @export
 */
export const GetListPlantStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;
export type GetListPlantStatusEnum = typeof GetListPlantStatusEnum[keyof typeof GetListPlantStatusEnum];
