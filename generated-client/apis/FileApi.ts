/* tslint:disable */
/* eslint-disable */
/**
 * SNGF API
 * API for managing plants, seeds, events, blogs, testimonials, and orders for the SNGF website
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileInfo,
  UploadFile,
} from '../models/index';
import {
    FileInfoFromJSON,
    FileInfoToJSON,
    UploadFileFromJSON,
    UploadFileToJSON,
} from '../models/index';

export interface DownloadFileRequest {
    fileId: string;
}

export interface GetFileRequest {
    fileId: string;
}

export interface GetFilesRequest {
    name?: string;
    type?: string;
    page?: number;
    pageSize?: number;
}

export interface UploadFileRequest {
    id?: string;
    name?: string;
    createdAt?: Date;
    fileToUpload?: Blob;
}

export interface UploadRawFileRequest {
    uploadFile: UploadFile;
}

/**
 * 
 */
export class FileApi extends runtime.BaseAPI {

    /**
     * Download File
     */
    async downloadFileRaw(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling downloadFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/files/{file_id}/download/`.replace(`{${"file_id"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download File
     */
    async downloadFile(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFileRaw(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileInfo>> {
        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling getFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/files/{file_id}/`.replace(`{${"file_id"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileInfoFromJSON(jsonValue));
    }

    /**
     */
    async getFile(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileInfo> {
        const response = await this.getFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFilesRaw(requestParameters: GetFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FileInfo>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/files/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FileInfoFromJSON));
    }

    /**
     */
    async getFiles(requestParameters: GetFilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FileInfo>> {
        const response = await this.getFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload File
     */
    async uploadFileRaw(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['id'] != null) {
            formParams.append('id', requestParameters['id'] as any);
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['createdAt'] != null) {
            formParams.append('createdAt', (requestParameters['createdAt'] as any).toISOString());
        }

        if (requestParameters['fileToUpload'] != null) {
            formParams.append('fileToUpload', requestParameters['fileToUpload'] as any);
        }

        const response = await this.request({
            path: `/files/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileInfoFromJSON(jsonValue));
    }

    /**
     * Upload File
     */
    async uploadFile(requestParameters: UploadFileRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileInfo> {
        const response = await this.uploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload raw File
     */
    async uploadRawFileRaw(requestParameters: UploadRawFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileInfo>> {
        if (requestParameters['uploadFile'] == null) {
            throw new runtime.RequiredError(
                'uploadFile',
                'Required parameter "uploadFile" was null or undefined when calling uploadRawFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/files/raw/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadFileToJSON(requestParameters['uploadFile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileInfoFromJSON(jsonValue));
    }

    /**
     * Upload raw File
     */
    async uploadRawFile(requestParameters: UploadRawFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileInfo> {
        const response = await this.uploadRawFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
