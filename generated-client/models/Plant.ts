/* tslint:disable */
/* eslint-disable */
/**
 * SNGF API
 * API for managing plants, seeds, events, blogs, testimonials, and orders for the SNGF website
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Plant
 */
export interface Plant {
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    category: PlantCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Plant
     */
    price: number;
    /**
     * Prix par unité (g pour graines, unité pour plantes)
     * @type {number}
     * @memberof Plant
     */
    pricePerUnit?: number;
    /**
     * Unité de vente (g, sachet, etc.)
     * @type {string}
     * @memberof Plant
     */
    unit?: string;
    /**
     * Quantité disponible (en grammes pour graines ou unités pour plantes)
     * @type {number}
     * @memberof Plant
     */
    quantity: number;
    /**
     * Taille de la plante (si catégorie = PLANT)
     * @type {string}
     * @memberof Plant
     */
    size?: PlantSizeEnum;
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    status: PlantStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    imageUrl?: string;
}


/**
 * @export
 */
export const PlantCategoryEnum = {
    Seed: 'SEED',
    Plant: 'PLANT'
} as const;
export type PlantCategoryEnum = typeof PlantCategoryEnum[keyof typeof PlantCategoryEnum];

/**
 * @export
 */
export const PlantSizeEnum = {
    Xs: 'XS',
    S: 'S',
    M: 'M',
    L: 'L',
    Xl: 'XL'
} as const;
export type PlantSizeEnum = typeof PlantSizeEnum[keyof typeof PlantSizeEnum];

/**
 * @export
 */
export const PlantStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;
export type PlantStatusEnum = typeof PlantStatusEnum[keyof typeof PlantStatusEnum];


/**
 * Check if a given object implements the Plant interface.
 */
export function instanceOfPlant(value: object): value is Plant {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('quantity' in value) || value['quantity'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function PlantFromJSON(json: any): Plant {
    return PlantFromJSONTyped(json, false);
}

export function PlantFromJSONTyped(json: any, ignoreDiscriminator: boolean): Plant {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'category': json['category'],
        'type': json['type'] == null ? undefined : json['type'],
        'description': json['description'] == null ? undefined : json['description'],
        'price': json['price'],
        'pricePerUnit': json['price_per_unit'] == null ? undefined : json['price_per_unit'],
        'unit': json['unit'] == null ? undefined : json['unit'],
        'quantity': json['quantity'],
        'size': json['size'] == null ? undefined : json['size'],
        'status': json['status'],
        'imageUrl': json['image_url'] == null ? undefined : json['image_url'],
    };
}

export function PlantToJSON(json: any): Plant {
    return PlantToJSONTyped(json, false);
}

export function PlantToJSONTyped(value?: Plant | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'category': value['category'],
        'type': value['type'],
        'description': value['description'],
        'price': value['price'],
        'price_per_unit': value['pricePerUnit'],
        'unit': value['unit'],
        'quantity': value['quantity'],
        'size': value['size'],
        'status': value['status'],
        'image_url': value['imageUrl'],
    };
}

