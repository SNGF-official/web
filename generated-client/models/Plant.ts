
/* eslint-disable */
/**
 * SNGF API
 * API for managing plants, seeds, events, blogs, testimonials, and orders for the SNGF website
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
    ImageToJSONTyped,
} from './Image';

/**
 * 
 * @export
 * @interface Plant
 */
export interface Plant {
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    size: PlantSizeEnum;
    /**
     * 
     * @type {Array<object>}
     * @memberof Plant
     */
    prices: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    category?: PlantCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Plant
     */
    quantity?: number;
    /**
     * 
     * @type {string}
     * @memberof Plant
     */
    status: PlantStatusEnum;
    /**
     * Listes des images associ√©es
     * @type {Array<Image>}
     * @memberof Plant
     */
    images?: Array<Image>;
}


/**
 * @export
 */
export const PlantSizeEnum = {
    Pm: 'PM',
    Mm: 'MM',
    Gm: 'GM'
} as const;
export type PlantSizeEnum = typeof PlantSizeEnum[keyof typeof PlantSizeEnum];

/**
 * @export
 */
export const PlantCategoryEnum = {
    Agroforestieres: 'AGROFORESTIERES',
    EndemiquesAutochtones: 'ENDEMIQUES_AUTOCHTONES',
    ExotiquesReboisement: 'EXOTIQUES_REBOISEMENT',
    Ornementales: 'ORNEMENTALES',
    Embroussaillements: 'EMBROUSSAILLEMENTS'
} as const;
export type PlantCategoryEnum = typeof PlantCategoryEnum[keyof typeof PlantCategoryEnum];

/**
 * @export
 */
export const PlantStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;
export type PlantStatusEnum = typeof PlantStatusEnum[keyof typeof PlantStatusEnum];


/**
 * Check if a given object implements the Plant interface.
 */
export function instanceOfPlant(value: object): value is Plant {
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('prices' in value) || value['prices'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function PlantFromJSON(json: any): Plant {
    return PlantFromJSONTyped(json, false);
}

export function PlantFromJSONTyped(json: any, _ignoreDiscriminator: boolean): Plant {
    if (json == null) {
        return json;
    }
    return {
        
        'size': json['size'],
        'prices': json['prices'],
        'id': json['id'],
        'name': json['name'],
        'category': json['category'] == null ? undefined : json['category'],
        'description': json['description'] == null ? undefined : json['description'],
        'quantity': json['quantity'] == null ? undefined : json['quantity'],
        'status': json['status'],
        'images': json['images'] == null ? undefined : ((json['images'] as Array<any>).map(ImageFromJSON)),
    };
}

export function PlantToJSON(json: any): Plant {
    return PlantToJSONTyped(json, false);
}

export function PlantToJSONTyped(value?: Plant | null, _ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'size': value['size'],
        'prices': value['prices'],
        'id': value['id'],
        'name': value['name'],
        'category': value['category'],
        'description': value['description'],
        'quantity': value['quantity'],
        'status': value['status'],
        'images': value['images'] == null ? undefined : ((value['images'] as Array<any>).map(ImageToJSON)),
    };
}

