/* tslint:disable */
/* eslint-disable */
/**
 * SNGF API
 * API for managing plants, seeds, events, blogs, testimonials, and orders for the SNGF website
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof Event
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    imageUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    status: EventStatusEnum;
}


/**
 * @export
 */
export const EventStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;
export type EventStatusEnum = typeof EventStatusEnum[keyof typeof EventStatusEnum];


/**
 * Check if a given object implements the Event interface.
 */
export function instanceOfEvent(value: object): value is Event {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function EventFromJSON(json: any): Event {
    return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'date': (new Date(json['date'])),
        'location': json['location'] == null ? undefined : json['location'],
        'imageUrl': json['imageUrl'] == null ? undefined : json['imageUrl'],
        'status': json['status'],
    };
}

export function EventToJSON(json: any): Event {
    return EventToJSONTyped(json, false);
}

export function EventToJSONTyped(value?: Event | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'description': value['description'],
        'date': ((value['date']).toISOString()),
        'location': value['location'],
        'imageUrl': value['imageUrl'],
        'status': value['status'],
    };
}

