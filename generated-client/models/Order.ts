/* tslint:disable */
/* eslint-disable */
/**
 * SNGF API
 * API for managing plants, seeds, events, blogs, testimonials, and orders for the SNGF website
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderItem } from './OrderItem';
import {
    OrderItemFromJSON,
    OrderItemFromJSONTyped,
    OrderItemToJSON,
    OrderItemToJSONTyped,
} from './OrderItem';

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    customerEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    number?: string;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    items: Array<OrderItem>;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    submittedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    status?: OrderStatusEnum;
}


/**
 * @export
 */
export const OrderStatusEnum = {
    Pending: 'PENDING',
    Confirmed: 'CONFIRMED',
    Cancelled: 'CANCELLED'
} as const;
export type OrderStatusEnum = typeof OrderStatusEnum[keyof typeof OrderStatusEnum];


/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): value is Order {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('items' in value) || value['items'] === undefined) return false;
    return true;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'customerEmail': json['customerEmail'] == null ? undefined : json['customerEmail'],
        'number': json['number'] == null ? undefined : json['number'],
        'items': ((json['items'] as Array<any>).map(OrderItemFromJSON)),
        'submittedAt': json['submittedAt'] == null ? undefined : (new Date(json['submittedAt'])),
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function OrderToJSON(json: any): Order {
    return OrderToJSONTyped(json, false);
}

export function OrderToJSONTyped(value?: Order | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'customerEmail': value['customerEmail'],
        'number': value['number'],
        'items': ((value['items'] as Array<any>).map(OrderItemToJSON)),
        'submittedAt': value['submittedAt'] == null ? undefined : ((value['submittedAt']).toISOString()),
        'status': value['status'],
    };
}

